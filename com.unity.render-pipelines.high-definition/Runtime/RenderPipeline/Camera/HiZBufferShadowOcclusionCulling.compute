//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/TextureXR.hlsl"

#pragma debug

struct InstanceData
{
	float3 boundsCenter;         // 3
	float3 boundsExtents;        // 6
};
struct DebugData
{
	float4 mipmap;
	float4 mipmapOffsetSize;
	float4 minMaxXY;
};
//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------
#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols
//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------
#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1
#define LOD00_RANGE 500
#define LOD01_RANGE 2000
//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------
CBUFFER_START(cb)
    float4x4 _UNITY_MATRIX_VP1;
	float4x4 _UNITY_MATRIX_VP2;
	float4x4 _UNITY_MATRIX_VP3;
	float4x4 _UNITY_MATRIX_VP4;

	float3 _CamPosition;
	float3 _ViewerPosition;
	//float2 _ViewportSize;	
	int2 _Resolution;
	
	uint _UseHighPrecision;
	uint _CascadeCount;
	uint _IsDirectional;
CBUFFER_END

RW_TEXTURE2D_X(float, _DepthMipChain);
RW_TEXTURE2D(float, _ShadowmapPyramid);
float3 _clipMin;
float3 _clipMax;
//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------
StructuredBuffer<InstanceData> _InstanceDataBuffer;
StructuredBuffer<uint4> _MipmapOffset;
RWStructuredBuffer<uint> _IsVisibleBuffer;
RWStructuredBuffer<DebugData> _debugBuffer;
//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------
#if UNITY_REVERSED_Z
# define MIN_DEPTH(l, r) max(l, r)
#else
# define MIN_DEPTH(l, r) min(l, r)
#endif
inline uint IsViewerOutsideObjBounds(float3 pos, float3 minPos, float3 maxPos)
{
    float boundsSize = distance(maxPos, minPos);
    return ((distance(pos, maxPos) > boundsSize)
            + (distance(pos, minPos) > boundsSize));
}


inline float GatherMinDepth4Point(float2 minXY, float2 maxXY, uint mip, int cascadeIndex)
{
	//float2 scale = _ViewportSize / _MipmapOffset[0].zw;
	float2 scale = float2(1, 1);
	float2 mipmapTextureSize = float2(_MipmapOffset[mip + cascadeIndex * 10].zw);
	uint2 offset = _MipmapOffset[mip + cascadeIndex * 10].xy;
	int2 corner0 = floor(float2(minXY.x, minXY.y) * mipmapTextureSize * scale) + offset;
	int2 corner1 = floor(float2(minXY.x, maxXY.y) * mipmapTextureSize * scale) + offset;
	int2 corner2 = floor(float2(maxXY.x, minXY.y) * mipmapTextureSize * scale) + offset;
	int2 corner3 = floor(float2(maxXY.x, maxXY.y) * mipmapTextureSize * scale) + offset;
		
	// uint2 corner0 = float2(floor(minXY.x * mipmapTextureSize.x), floor(minXY.y * mipmapTextureSize.y)) + offset;
	// uint2 corner1 = float2(floor(minXY.x * mipmapTextureSize.x), ceil(maxXY.y * mipmapTextureSize.y)) + offset;
	// uint2 corner2 = float2(ceil(maxXY.x * mipmapTextureSize.x), floor(minXY.y * mipmapTextureSize.y)) + offset;
	// uint2 corner3 = float2(ceil(maxXY.x * mipmapTextureSize.x), ceil(maxXY.y * mipmapTextureSize.y)) + offset;
		
	float4 depth;
	depth.x = _ShadowmapPyramid[(corner0)];
	depth.y = _ShadowmapPyramid[(corner1)];
	depth.z = _ShadowmapPyramid[(corner2)];
	depth.w = _ShadowmapPyramid[(corner3)];
	float HiZdepth = min(min(depth.x, depth.y), min(depth.z, depth.w));  
	//HiZdepth = max(max(depth.x, depth.y), max(depth.z, depth.w));  
	HiZdepth *= 2;
	return HiZdepth;
}

inline float GatherMinDepth(float2 minXY, float2 maxXY, uint mip, int cascadeIndex)
{
	float2 mipmapTextureSize = float2(_MipmapOffset[mip + cascadeIndex * 10].zw); 
	float2 offset = _MipmapOffset[mip + cascadeIndex * 10].xy;
	//float2 scale = _ViewportSize / _MipmapOffset[0 + cascadeIndex * 10].zw;
	float2 scale = float2(1, 1);
	int2 cornerMin = floor(minXY * mipmapTextureSize * scale + offset);
	int2 cornerMax = floor(maxXY * mipmapTextureSize * scale + offset);
	//int2 cornerMin = round(minXY * mipmapTextureSize * scale + offset);
	//int2 cornerMax = floor(maxXY * mipmapTextureSize * scale + offset);
		
	float HiZdepth = 1;
	for(int y = cornerMin.y; y <= cornerMax.y; ++y)
	{
		for(int x = cornerMin.x; x <= cornerMax.x; ++x)
		{
			int2 xy = int2(x, y);
			HiZdepth = min(HiZdepth, _ShadowmapPyramid[(xy)]);
		}  
	}
	HiZdepth *= 2;	
	return HiZdepth;
}

inline uint isCascadeVisibleFromDepth(float clipMinZ, float depth)
{
	return (clipMinZ) >= depth - 0.000015; // last is an epsilon
}

// Hi-Z Culling
inline uint isCascadeVisibleAfterOcclusionCulling(int cascadeIndex, float clipMinX, float clipMaxX, float clipMinY, float clipMaxY, float clipMinZ, int id)
{
    // Change it to 0 - 1 range 
    float2 minXY = float2(clipMinX, clipMinY) * 0.5f + 0.5f;
    float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5f + 0.5f;
    minXY = clamp(minXY, 0, 1);
	maxXY = clamp(maxXY, 0, 1);
	
    // Calculate hi-Z buffer mip
    //int2 size = (maxXY - minXY) * _ViewportSize.xy;
	int2 size = (maxXY - minXY) * _Resolution;
	
    //float mip = ceil(log2(max(size.x, size.y) / 2.0f));
	int mip = ceil(log2(max(size.x, size.y)));
	int maxMip = ceil(log2(_Resolution.x)) - 1;
    mip = clamp(mip, 0, maxMip);
	
	//mip = 0;
	float HiZdepth = 1;  
	HiZdepth = GatherMinDepth4Point(minXY, maxXY, mip, cascadeIndex);
	HiZdepth = _UseHighPrecision && isCascadeVisibleFromDepth(clipMinZ, HiZdepth) > 0.0f && mip > 1? GatherMinDepth(minXY, maxXY, mip - 1, cascadeIndex): HiZdepth;
	HiZdepth = _UseHighPrecision && isCascadeVisibleFromDepth(clipMinZ, HiZdepth) > 0.0f && mip > 2? GatherMinDepth(minXY, maxXY, mip - 2, cascadeIndex): HiZdepth;
	
	//if (cascadeIndex == 0)
	{
		//mip = 0;
		_debugBuffer[id].mipmap.x = mip;
		_debugBuffer[id].mipmap.y = clipMinZ;
		//_debugBuffer[id].mipmap.xy = float2(clipMinX, clipMinY);
		_debugBuffer[id].mipmap.z = HiZdepth;
		//_debugBuffer[id].mipmap.zw = float2(clipMaxX, clipMaxY);
		_debugBuffer[id].minMaxXY.xy = minXY;
		//_debugBuffer[id].minMaxXY.x = clipMinX;
		//_debugBuffer[id].minMaxXY.y = clipMinY;
		_debugBuffer[id].minMaxXY.zw = maxXY;
		//_debugBuffer[id].minMaxXY.z = clipMaxX;
		//_debugBuffer[id].minMaxXY.w = clipMaxY;
		_debugBuffer[id].mipmapOffsetSize.xy = _MipmapOffset[mip + cascadeIndex * 10].xy;
		_debugBuffer[id].mipmapOffsetSize.zw = _MipmapOffset[mip + cascadeIndex * 10].zw;
	}
		
    //return HiZdepth > 0? isCascadeVisibleFromDepth(clipMinZ, HiZdepth): 0; 
	return isCascadeVisibleFromDepth(clipMinZ, HiZdepth); 
}

inline uint isVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.z > clipPos.w 
            || clipPos.x < -clipPos.w 
            || clipPos.x > clipPos.w 
            || clipPos.y < -clipPos.w 
            || clipPos.y > clipPos.w) 
            ? 0 : 1;
}
inline uint DetailCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY)
{
	float2 minXY = float2(clipMinX, clipMinY) * 0.5f + 0.5f;
    float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5f + 0.5f;
    minXY = clamp(minXY, 0, 1);
	maxXY = clamp(maxXY, 0, 1);
	
	int2 cornerMin = round(minXY * _Resolution); 
	int2 cornerMax = round(maxXY * _Resolution);
	return cornerMin.x == cornerMax.x || cornerMin.y == cornerMax.y? 0: 1;
}

inline uint CalculateMinMax(float4 corner[8], float4x4 matrixVP, uint id)
{
	//matrixVP = _UNITY_MATRIX_VP1;
	//float4 clipPos = mul(matrixVP, float4(corner[0].xyz - _CamPosition, 1.0f));
	float4 clipPos = mul(matrixVP, corner[0]);
	
	//_debugBuffer[id].minMaxXY = clipPos;
	
    uint isInFrustum = isVisibleAfterFrustumCulling(clipPos);
    clipPos.xyz = clipPos.xyz / clipPos.w;
    float clipMinX = clipPos.x;
    float clipMaxX = clipPos.x;
    float clipMinY = clipPos.y;
    float clipMaxY = clipPos.y;
    float clipMinZ = clipPos.z;
	//_debugBuffer[id].minMaxXY = clipPos;
	
    //float minDistanceToCamera = distance(instance.boundsCenter.xyz, _ViewerPosition.xyz);
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        //clipPos = mul(matrixVP, float4(corner[i].xyz - _CamPosition, 1.0f));
		clipPos = mul(matrixVP, corner[i]);
		
		
        // For Frustum
        isInFrustum = saturate(isInFrustum + isVisibleAfterFrustumCulling(clipPos));
        // For HiZ
        clipPos.xyz = clipPos.xyz / clipPos.w;
        clipMinX = min(clipPos.x, clipMinX);
        clipMaxX = max(clipPos.x, clipMaxX);
        clipMinY = min(clipPos.y, clipMinY);
        clipMaxY = max(clipPos.y, clipMaxY);
        clipMinZ = min(clipPos.z, clipMinZ);
    }
	 
	_clipMin.x = clipMinX;
	_clipMin.y = clipMinY;
	_clipMin.z = clipMinZ;
	_clipMax.x = clipMaxX;
	_clipMax.y = clipMaxY;
	
	//_debugBuffer[id].minMaxXY.xy = _clipMin.xy;
	//_debugBuffer[id].minMaxXY.zw = _clipMax.xy;
	//_debugBuffer[id].minMaxXY = clipPos;
	return isInFrustum;
}
//--------------------------------------------------------------------------------------
// Kernels
//--------------------------------------------------------------------------------------
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
        in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
    )
{
    // Calculate the instance index, only correct if the THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z
	// and dipathed group num Y and Z are all 1. 
    uint tID = _dispatchThreadID.x;
    // Reset the visible state
    _IsVisibleBuffer[tID] = 0;
    //_ShadowisCascadeVisibleBuffer[tID] = 0;
    // Get the instance data
    InstanceData instance = _InstanceDataBuffer[tID];
    // Check if the instance is visible
    float3 minPos = instance.boundsCenter - instance.boundsExtents;
    float3 maxPos = instance.boundsCenter + instance.boundsExtents + 0.01f;
	
    float4 boxCorners[8];
    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);
	
	
	float4x4 matrixVP[4];
	matrixVP[0] = _UNITY_MATRIX_VP1;
	matrixVP[1] = _UNITY_MATRIX_VP2;
	matrixVP[2] = _UNITY_MATRIX_VP3;
	matrixVP[3] = _UNITY_MATRIX_VP4;
	
	uint cascadeVisible[4];
	uint isVisible = 0;
	_clipMin = 0;
	_clipMax = 0;
	
	_debugBuffer[tID].mipmap.z = -1;
	[unroll]
	for (int i = 0; i != 1; ++i)
	{ 
		cascadeVisible[i] = 0;
		uint isInFrustum = i < _CascadeCount? CalculateMinMax(boxCorners, matrixVP[i], tID): 0;
		
		// We only cull instances where the camera doesn't intersect the instance 
		// bounds. If the camera is inside the bounds we want to render the object
		//uint isCascadeVisible = isVisible;
		uint isViewerOutsideObj = _IsDirectional == 0? IsViewerOutsideObjBounds(_ViewerPosition, minPos, maxPos): 1;
		uint skipCalculate = isViewerOutsideObj && isVisible == 0 && i < _CascadeCount? 0: 1;
		
		// Do we pass the frustum culling...?
		uint isCascadeVisible = isInFrustum * (skipCalculate == 0? 1: 0);	
		isCascadeVisible *= (isCascadeVisible > 0)? DetailCulling(_clipMin.x, _clipMax.x, _clipMin.y, _clipMax.y): 1;

		_debugBuffer[tID].mipmap.z = isCascadeVisible > 0? -1: _debugBuffer[tID].mipmap.z;
		// Do we pass the occlusion culling...?
		isCascadeVisible *= (isCascadeVisible > 0)? isCascadeVisibleAfterOcclusionCulling(i, _clipMin.x, _clipMax.x, _clipMin.y, _clipMax.y, _clipMin.z, tID): 1;

		//isCascadeVisible = isInFrustum;
		
		cascadeVisible[i] = isCascadeVisible;
		
		isVisible += cascadeVisible[i];
		
		//isVisible = skipCalculate;
	}
	
	//_debugBuffer[tID].minMaxXY.xy = _clipMin.xy;
	//_debugBuffer[tID].minMaxXY.zw = _clipMax.xy;
		
    
    // Output
    _IsVisibleBuffer[tID] = isVisible;
}